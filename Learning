#######################      What is NumPy?   ##############################
# NumPy is a Python library used for working with arrays.

# It also has functions for working in domain of linear algebra, fourier transform, and matrices.

# NumPy was created in 2005 by Travis Oliphant. It is an open source project and you can use it freely.

# NumPy stands for Numerical Python.

########################      Why Use NumPy?     ##############################
# In Python we have lists that serve the purpose of arrays, but they are slow to process.

# NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.

# The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.

# Arrays are very frequently used in data science, where speed and resources are very important.


#    Installation of NumPy       pip install numpy


#####################    Sample Code    ##############################

# import numpy as np

# # print(np.__version__) 

# arr = np.array([1, 2, 3, 4, 5])

# print(arr)



#####################    NumPy as np    ##############################

import numpy as np

# a = np.array(42)
# b = np.array([1, 2, 3, 4, 5])
# c = np.array([[1, 2, 3], [4, 5, 6]])
# d = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])

# print(a.ndim)
# print(b.ndim)          # ndim is used to check the dimension of the array
# print(c.ndim)
# print(d.ndim)


# arr = np.array([1, 2, 3, 4], ndmin=5)    #Creating an array with 5 dimensions
# print(arr)



# arr = np.array([[1,2,3,4,5], [6,7,8,9,10]])

# print('2nd element on 1st row: ', arr[0, 1])    #Access the 2nd element on 1st row


# import numpy as np

# arr = np.array([1, 2, 3, 4, 5, 6, 7])

# print(arr[1:5])             #Slice elements from index 1 to index 5


# import numpy as np

# arr = np.array([1, 2, 3, 4, 5, 6, 7])

# print(arr[-3:-1])        #Slice from the index 3 from the end to index 1 from the end Negative Slicing


# import numpy as np

# arr = np.array([1, 2, 3, 4, 5, 6, 7])

# print(arr[1:5:3])        #Return every other element from index 1 to index 5





###########################    Data Types in NumPy    ##############################

# import numpy as np

# arr = np.array([1, 2, 3, 4])

# print(arr.dtype)    #Get the data type of an array object


# import numpy as np

# arr = np.array([1, 2, 3, 4], dtype='S')

# print(arr)
# print(arr.dtype)    #Create an array with data type string



# import numpy as np

# arr = np.array([1.1, 2.1, 3.1])

# newarr = arr.astype(int)

# print(newarr)
# print(newarr.dtype)    #Change data type from float to integer by using 'astype' method


########################  Copy And View in NumPy  ##############################

# The copy owns the data and any changes made to the copy will not affect original array, and any changes made to the original array will not affect the copy.

# The view does not own the data and any changes made to the view will affect the original array, and any changes made to the original array will affect the view.

# import numpy as np

# arr = np.array([1, 2, 3, 4, 5])
# x = arr.copy()
# y=arr.view()
# arr[0] = 31

# print(arr)
# print(x)

# y[0]=18
# print(y)
# print(arr)




########################  Shape of an Array  ##############################

## The shape of an array is the number of elements in each dimension.


# import numpy as np

# arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])

# print(arr.shape)    #Get the shape of an array



## Reshaping means changing the shape of an array.

## The shape of an array is the number of elements in each dimension.

## By reshaping we can add or remove dimensions or change number of elements in each dimension.


# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])

# newarr = arr.reshape(4, 3)

# print(newarr)    #Reshape From 1-D to 2-D


# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])

# newarr = arr.reshape(2, 3, 2)

# print(newarr)  #Reshape From 1-D to 3-D


# arr = np.array([[1, 2, 3], [4, 5, 6]])

# newarr = arr.reshape(-1)

# print(newarr)    #Flattening the arrays  (Flattening array means converting a multidimensional array into a 1D array)


# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])

# newarr = arr.reshape(2, 2, -1)

# print(newarr)    #Note: We can not pass -1 to more than one dimension.  (Reshape From 1-D to 3-D)  Pass -1 as the value, and NumPy will calculate this number for you.


# a = np.zeros((2, 3))    #Create an array filled with 0 values with 2 rows and 3 columns
# print(a)


# a = np.arange(1, 10, 2)    #Create an array filled with a linear sequence starting at 1, ending at 10, stepping by 2
# print(a)

# b=np.linspace(0, 1, 5)    #Create an array of five values evenly spaced between 0 and 1
# print(b)

# print(a.min())    #Find the minimum value in an array  

# a.max()    #Find the maximum value in an array

# a.sum()    #Compute sum of all elements

# a.mean()    #Compute mean of all elements

# a.std()    #Compute standard deviation

# a.argmax()    #Find the index of the maximum value

# a.argmin()    #Find the index of the minimum value

# a.cumsum()    #Compute cumulative sum of elements

# a.cumprod()    #Compute cumulative product of elements

# a.sort()    #Sort an array

# a[::-1]    #Reverse an array

# a[1:]    #Slice elements from index 1 to the end of the array

# a=np.array([[1,2,3],[4,5,6]])

# c=a.sum(axis=0)    #Sum of each column
# print(c)

# d=a.sum(axis=1)    #Sum of each row
# print(d)

# a=np.arange(0,6).reshape(2,3)
# b=np.arange(6,12).reshape(2,3)

# print(a)    
# print(b)

# c=np.vstack((a,b))    #Stack arrays vertically (row-wise)
# print(c)

# d=np.hstack((a,b))    #Stack arrays horizontally (column-wise)
# print(d)


# a=np.arange(0,30).reshape(2,15)
# print(a)

# b=np.hsplit(a,3)    #Split the array horizontally at the 3rd index
# print(b[0])
# print(b[1])
# print(b[2])

# c=np.vsplit(a,2)    #Split the array vertically at the 2nd index
# print(c[0])
# print(c[1])

# b=a>15    #Find elements in the array that are greater than 15
# print(b)

# print(a[b])    #Return an array with elements that are greater than 15

# a[b]=0    #Replace elements in the array that are greater than 15 with 0
# print(a)

###################   nditer   ##################

a=np.arange(12).reshape(3,4)
print(a)

for x in np.nditer(a):    #Iterate on the elements of the array
    print(x)

for x in np.nditer(a, order='F'):    #Iterate on the elements of the array in Fortran order (column-wise)
    print(x)

for x in np.nditer(a, flags=['external_loop'], order='F'):    #Iterate on the elements of the array as a 1-D array
    print(x)


for x in np.nditer(a, op_flags=['readwrite']):    #Iterate on the elements of the array and modify the array values
    x[...] = x * x
    print(x)


######################  Iterate two arrays  ##############################

b=np.arange(12,24).reshape(3,4)

for x,y in np.nditer([a,b]):    #Iterate on the elements of the two arrays
    print(x,y)
